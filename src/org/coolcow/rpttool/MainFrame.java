/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.coolcow.rpttool;

import java.awt.Component;
import java.awt.EventQueue;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author jruiz
 */
public class MainFrame extends javax.swing.JFrame {

    final public static DateFormat DATE_FORMAT = new SimpleDateFormat("kk:mm:ss");
    private final LineModel model = new LineModel();
    private final TableRowSorter rowSorter = new TableRowSorter(model);
    private File rptFile = null;
    private int lineNumber = 0;
    private LogFileTailer logFileTailer;
    private Line popLine = null;

    /**
     * Creates new form NewJFrame
     */
    public MainFrame() {
        initComponents();

        tblLines.getColumnModel().getColumn(0).setMinWidth(75);
        tblLines.getColumnModel().getColumn(0).setPreferredWidth(75);
        tblLines.getColumnModel().getColumn(1).setMinWidth(75);
        tblLines.getColumnModel().getColumn(1).setPreferredWidth(75);
        
        tblLines.setEnabled(false);

        tblLines.setDefaultRenderer(Date.class, new DefaultTableCellRenderer() {

            @Override
            public Component getTableCellRendererComponent(final JTable table, final Object value, final boolean isSelected, final boolean hasFocus, final int row, final int column) {
                final JComponent component;
                if (value instanceof Date) {
                    component = (JComponent)super.getTableCellRendererComponent(table, DATE_FORMAT.format(value), isSelected, hasFocus, row, column);
                } else {
                    component = (JComponent)super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                }
                component.add(pumTableitem);
                return component;
            }
        });
        
        tblLines.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseReleased(final MouseEvent e) {
                
                if (e.isPopupTrigger()) {
                    final int row = tblLines.rowAtPoint( e.getPoint() );
                    popLine = (Line) model.getLine(tblLines.convertRowIndexToModel(row));
                    pumTableitem.show(e.getComponent(), e.getX(), e.getY());
                }
            }

        });        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pumTableitem = new javax.swing.JPopupMenu();
        mniCopy = new javax.swing.JMenuItem();
        panMain = new javax.swing.JPanel();
        panProgress = new javax.swing.JPanel();
        pgbLines = new javax.swing.JProgressBar();
        panFilter = new javax.swing.JPanel();
        txtFilter = new javax.swing.JTextField();
        btnFilter = new javax.swing.JButton();
        panTable = new javax.swing.JPanel();
        scrTable = new javax.swing.JScrollPane();
        tblLines = new javax.swing.JTable() {
            @Override public void doLayout() {
                if (getTableHeader().getResizingColumn() == null) {
                    if (getAutoResizeMode() == JTable.AUTO_RESIZE_LAST_COLUMN) {
                        getTableHeader().setResizingColumn(getColumnModel().getColumn(getColumnModel().getColumnCount()-1));
                    }
                }
                super.doLayout();
            }
        };
        mnbMain = new javax.swing.JMenuBar();
        menMain = new javax.swing.JMenu();
        mniLoadRpt = new javax.swing.JMenuItem();
        mniExit = new javax.swing.JMenuItem();

        mniCopy.setText("copy to clipboard");
        mniCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniCopyActionPerformed(evt);
            }
        });
        pumTableitem.add(mniCopy);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RPT Tool (alpha) - by coolcow");
        setMinimumSize(new java.awt.Dimension(400, 400));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        panMain.setLayout(new java.awt.GridBagLayout());

        panProgress.setLayout(new java.awt.GridBagLayout());

        pgbLines.setMaximumSize(new java.awt.Dimension(32767, 20));
        pgbLines.setMinimumSize(new java.awt.Dimension(10, 20));
        pgbLines.setPreferredSize(new java.awt.Dimension(146, 20));
        pgbLines.setString("0 lines");
        pgbLines.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        panProgress.add(pgbLines, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        panMain.add(panProgress, gridBagConstraints);

        panFilter.setLayout(new java.awt.GridBagLayout());

        txtFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFilterActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        panFilter.add(txtFilter, gridBagConstraints);

        btnFilter.setText("Apply Filter");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        panFilter.add(btnFilter, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        panMain.add(panFilter, gridBagConstraints);

        panTable.setLayout(new java.awt.GridBagLayout());

        tblLines.setModel(model);
        tblLines.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        tblLines.setRowSorter(rowSorter);
        tblLines.getTableHeader().setReorderingAllowed(false);
        scrTable.setViewportView(tblLines);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panTable.add(scrTable, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panMain.add(panTable, gridBagConstraints);
        panTable.getAccessibleContext().setAccessibleName("");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(panMain, gridBagConstraints);

        menMain.setText("File");

        mniLoadRpt.setText("Load RPT");
        mniLoadRpt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniLoadRptActionPerformed(evt);
            }
        });
        menMain.add(mniLoadRpt);

        mniExit.setText("Exit");
        mniExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniExitActionPerformed(evt);
            }
        });
        menMain.add(mniExit);

        mnbMain.add(menMain);

        setJMenuBar(mnbMain);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mniLoadRptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniLoadRptActionPerformed
        final JFileChooser fc = new JFileChooser(rptFile);
        final FileNameExtensionFilter rptFilter = new FileNameExtensionFilter("RPT file", "rpt");
        fc.setFileFilter(rptFilter);
        fc.setDialogTitle("choose RPT file");
        final int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            rptFile = fc.getSelectedFile();
            new Thread() {

                @Override
                public void run() {
                    loadLines(rptFile);
                }
            }.start();
        }
    }//GEN-LAST:event_mniLoadRptActionPerformed

    private void mniExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mniExitActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        rowSorter.setRowFilter(RowFilter.regexFilter(txtFilter.getText(), 2));
    }//GEN-LAST:event_btnFilterActionPerformed

    private void txtFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFilterActionPerformed
        rowSorter.setRowFilter(RowFilter.regexFilter(txtFilter.getText(), 2));
    }//GEN-LAST:event_txtFilterActionPerformed

    private void mniCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniCopyActionPerformed
        if (popLine != null) {
            final Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            final Transferable transferable = new StringSelection(popLine.getContent());
            clipboard.setContents(transferable, null);
        }
    }//GEN-LAST:event_mniCopyActionPerformed

    private void loadLines(final File rptFile) {
        model.clear();
        lineNumber = 0;
        EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                pgbLines.setIndeterminate(true);
                pgbLines.setEnabled(true);
                rowSorter.allRowsChanged();
            }
        });

        if (logFileTailer != null) {
            logFileTailer.stopTailing();
        }
        logFileTailer = new LogFileTailer(rptFile, 1000);
        logFileTailer.addLogFileTailerListener(
            new LogFileTailerListener() {

                @Override
                public void newLogFileLine(final String lineString) {
                    lineNumber++;
                    EventQueue.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            pgbLines.setValue(lineNumber);
                            pgbLines.setString(lineNumber + " lines");
                        }
                    });

                    String contentString = null;
                    try {
                        contentString = lineString.substring(9);
                    } catch (final Exception ex) {
                    }
                    Date date = null;
                    try {
                        final String timeString = lineString.substring(0, 8);
                        date = DATE_FORMAT.parse(timeString);
                    } catch (final Exception ex) {
                    }
                    final Line line = new Line(lineNumber, date, contentString);
                    model.addLine(line);
                    EventQueue.invokeLater(new Runnable() {

                        @Override
                        public void run() {
//                            tblLines.scrollRectToVisible(tblLines.getCellRect(tblLines.getRowCount() - 1, tblLines.getColumnCount(), true));
                        }
                    });
                }
            });
        logFileTailer.start();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {

                final MainFrame frame = new MainFrame();
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFilter;
    private javax.swing.JMenu menMain;
    private javax.swing.JMenuBar mnbMain;
    private javax.swing.JMenuItem mniCopy;
    private javax.swing.JMenuItem mniExit;
    private javax.swing.JMenuItem mniLoadRpt;
    private javax.swing.JPanel panFilter;
    private javax.swing.JPanel panMain;
    private javax.swing.JPanel panProgress;
    private javax.swing.JPanel panTable;
    private javax.swing.JProgressBar pgbLines;
    private javax.swing.JPopupMenu pumTableitem;
    private javax.swing.JScrollPane scrTable;
    private javax.swing.JTable tblLines;
    private javax.swing.JTextField txtFilter;
    // End of variables declaration//GEN-END:variables
}
